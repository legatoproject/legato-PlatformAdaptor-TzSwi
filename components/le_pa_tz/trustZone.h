//--------------------------------------------------------------------------------------------------
/** @file trustZone.h
 *
 * Provides a TrustZone component that allows a process to generate new keys and use the keys to
 * encrypt and decrypt data.
 *
 * Copyright (C) Sierra Wireless Inc.
 */
//--------------------------------------------------------------------------------------------------

#ifndef LEGATO_TRUSTZONE_INCLUDE_GUARD
#define LEGATO_TRUSTZONE_INCLUDE_GUARD

#define KM_MAX_KEY_SIZE             64             ///< Maximum key size

/**-----------------------------------------------------------------------------------------------
 *
 * Generate a key from TrustZone.
 *
 * @return
 *      - LE_OK
 *      - LE_FAULT
 */
//--------------------------------------------------------------------------------------------------
LE_SHARED le_result_t tz_GenerateKey
(
    uint8_t* keyPtr,                    ///< [IN/OUT] Key.
    uint32_t* keySizePtr                ///< [IN/OUT] Size of key.
);

/**-----------------------------------------------------------------------------------------------
 *
 * Encrypt plain text data using key generated by TrustZone.
 *
 * @return
 *      - LE_OK
 *      - LE_FAULT
 */
//--------------------------------------------------------------------------------------------------
LE_SHARED le_result_t tz_EncryptData
(
    uint8_t* keyPtr,                    ///< [IN] Key.
    uint32_t keySize,                   ///< [IN] Size of key.
    uint8_t* plainData,                 ///< [IN] Plain text.
    uint32_t plainDataSize,             ///< [IN] Size of plain text.
    uint8_t* encryptedData,             ///< [IN/OUT] Encrypted data.
    uint32_t* encryptedDataSizePtr      ///< [IN/OUT] Size of encrypted data.
);

/**-----------------------------------------------------------------------------------------------
 *
 * Decrypt encrypted data using key generated by TrustZone.
 *
 * @return
 *      - LE_OK
 *      - LE_FAULT
 */
//--------------------------------------------------------------------------------------------------
LE_SHARED le_result_t tz_DecryptData
(
    uint8_t* keyPtr,                    ///< [IN] Key.
    uint32_t keySize,                   ///< [IN] Size of key.
    uint8_t* encryptedData,             ///< [IN] Encrypted data.
    uint32_t encryptedDataSize,         ///< [IN] Size of encrypted data.
    uint8_t* decryptedData,             ///< [IN/OUT] Decrypted data.
    uint32_t* decryptedDataSizePtr      ///< [IN/OUT] Size of decrypted data.
);

#endif